{
  "id": "snapshot_1761039512432_emkq7fqvz",
  "approvalId": "approval_1761039512429_qroxucgz6",
  "approvalTitle": "Course CRUD Requirements Document",
  "version": 1,
  "timestamp": "2025-10-21T09:38:32.432Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Requirements Document\n\n## Introduction\n\nThe Course CRUD feature provides comprehensive course management capabilities for the LMS platform. This feature enables administrators and authenticated users to create, read, update, and delete courses with essential metadata including pricing, categorization, and multimedia support. The system supports both public course discovery and authenticated course management, aligning with the platform's educational mission.\n\n## Alignment with Product Vision\n\nThis feature supports the LMS platform's goal of providing comprehensive educational content management by:\n- Enabling scalable course catalog management\n- Supporting multiple course categories (Prakerja, SPL) for diverse learning pathways\n- Providing flexible pricing models for different course types\n- Ensuring proper content governance through creator attribution\n- Maintaining data integrity through proper validation and relationships\n\n## Requirements\n\n### Requirement 1: Public Course Discovery\n\n**User Story:** As a prospective student, I want to browse and view available courses, so that I can discover learning opportunities that match my interests and budget.\n\n#### Acceptance Criteria\n\n1. WHEN a user accesses the courses endpoint THEN the system SHALL return a list of all available courses with basic metadata\n2. WHEN a user requests a specific course by ID THEN the system SHALL return complete course details including thumbnail and rating\n3. IF a course does not exist THEN the system SHALL return a 404 error with appropriate message\n4. WHEN courses are listed THEN the system SHALL include name, price, category tags, thumbnail, and rating information\n\n### Requirement 2: Course Creation\n\n**User Story:** As an authenticated instructor, I want to create new courses, so that I can share my educational content with students.\n\n#### Acceptance Criteria\n\n1. WHEN an authenticated user submits course creation data THEN the system SHALL validate all required fields (name, price, category tags)\n2. IF required fields are missing or invalid THEN the system SHALL return validation errors with specific field information\n3. WHEN course creation succeeds THEN the system SHALL return the created course with generated ID and timestamps\n4. IF the user is not authenticated THEN the system SHALL return a 401 unauthorized error\n5. WHEN a course is created THEN the system SHALL associate it with the authenticated user as the creator\n\n### Requirement 3: Course Management\n\n**User Story:** As a course creator, I want to update and delete my courses, so that I can maintain accurate and current course information.\n\n#### Acceptance Criteria\n\n1. WHEN an authenticated user attempts to update a course THEN the system SHALL verify the user is the course creator\n2. IF the user is not the course creator THEN the system SHALL return a 403 forbidden error\n3. WHEN course update succeeds THEN the system SHALL return the updated course with modified timestamp\n4. WHEN an authenticated user attempts to delete a course THEN the system SHALL verify the user is the course creator\n5. IF course deletion succeeds THEN the system SHALL remove the course and return success confirmation\n6. IF the course to update/delete does not exist THEN the system SHALL return a 404 error\n\n### Requirement 4: Course Data Structure\n\n**User Story:** As a system architect, I want consistent course data structure, so that the system maintains data integrity and supports future features.\n\n#### Acceptance Criteria\n\n1. WHEN a course is stored THEN the system SHALL require name (string, non-empty)\n2. WHEN a course is stored THEN the system SHALL require price (numeric, 2 decimal places, non-negative)\n3. WHEN a course is stored THEN the system SHALL require categoryTag (array, contains \"prakerja\" and/or \"spl\")\n4. WHEN a course is stored THEN the system SHALL optionally store thumbnail (string, URL format)\n5. WHEN a course is stored THEN the system SHALL optionally store rating (numeric, 1-5 scale, 1 decimal place)\n6. WHEN a course is stored THEN the system SHALL automatically generate timestamps for creation and last update\n7. WHEN a course is created by authenticated user THEN the system SHALL store the creator's user ID\n\n## Non-Functional Requirements\n\n### Code Architecture and Modularity\n- **Single Responsibility Principle**: Each CRUD operation shall be implemented in separate, focused handler functions\n- **Modular Design**: Course schema, validation, and business logic shall be separated into distinct modules\n- **Dependency Management**: Database operations shall use dependency injection pattern with database parameter as first argument\n- **Clear Interfaces**: All API endpoints shall have well-defined input/output contracts using Zod schemas\n\n### Performance\n- **Response Time**: API responses shall complete within 500ms for database operations\n- **Scalability**: Course listing shall support pagination for large catalogs (1000+ courses)\n- **Database Efficiency**: All queries shall use proper indexing and optimized joins\n\n### Security\n- **Authentication**: All write operations (create, update, delete) shall require valid authentication\n- **Authorization**: Users shall only modify courses they created\n- **Input Validation**: All inputs shall be validated using Zod schemas with proper error messages\n- **SQL Injection Prevention**: All database operations shall use parameterized queries via Drizzle ORM\n\n### Reliability\n- **Error Handling**: All operations shall have comprehensive error handling with appropriate HTTP status codes\n- **Data Integrity**: Database constraints shall prevent invalid data states\n- **Transaction Safety**: Related operations shall use database transactions when needed\n\n### Usability\n- **API Consistency**: All endpoints shall follow consistent RESTful patterns and response formats\n- **Documentation**: Complete OpenAPI documentation shall be auto-generated from oRPC contracts\n- **Developer Experience**: Type-safe client generation shall provide excellent IDE support\n",
  "fileStats": {
    "size": 6019,
    "lines": 96,
    "lastModified": "2025-10-21T09:38:23.150Z"
  },
  "comments": []
}
