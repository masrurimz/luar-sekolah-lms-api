{
  "id": "snapshot_1761041904628_86c2kpvk3",
  "approvalId": "approval_1761040982091_tn8m9fqkx",
  "approvalTitle": "Course CRUD Tasks Document (Revised - Feature-Based)",
  "version": 3,
  "timestamp": "2025-10-21T10:18:24.628Z",
  "trigger": "revision_requested",
  "status": "pending",
  "content": "# Tasks Document\n\n- [ ] 1. Create course feature database schema\n  - File: apps/web/src/lib/db/schema/course.ts\n  - Define course and enrollment tables with proper relationships\n  - Add TypeScript type exports (Course, NewCourse, Enrollment, NewEnrollment)\n  - Purpose: Establish data layer foundation for course management\n  - _Leverage: apps/web/src/lib/db/schema/auth.ts, apps/web/src/lib/db/schema/utils.ts_\n  - _Requirements: 4.1, 4.2, 4.3, 4.4_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Database Developer with expertise in Drizzle ORM and PostgreSQL schema design | Task: Create course and enrollment database schemas following requirements 4.1-4.4, leveraging existing UUID generation and timestamp patterns from auth schema and utils | Restrictions: Must follow existing schema patterns, use proper data types, maintain referential integrity, include all required fields and relationships | Success: Schemas compile without errors, all required fields are properly typed, relationships are correctly defined, database migrations can be generated successfully_\n\n- [ ] 2. Update schema index exports\n  - File: apps/web/src/lib/db/schema/index.ts\n  - Add exports for course and enrollment schemas\n  - Purpose: Make course schemas available throughout the application\n  - _Leverage: existing schema export patterns_\n  - _Requirements: 4.1, 4.2, 4.3, 4.4_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: TypeScript Developer specializing in module organization | Task: Update schema index to export course and enrollment types following existing export patterns | Restrictions: Must maintain proper import order, do not break existing exports, follow project naming conventions | Success: All course-related types are properly exported and accessible, existing functionality remains intact_\n\n- [ ] 3. Create course feature domain entities\n  - File: apps/web/src/routes/courses/-domain/entities.ts\n  - Define core business entities and types for courses and enrollments\n  - Export TypeScript interfaces for domain layer\n  - Purpose: Establish domain entities following Clean Architecture\n  - _Leverage: database schema types_\n  - _Requirements: 4.1, 4.2, 4.3, 4.4, 5.1, 5.2, 5.3, 5.4, 5.5_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Domain Architect with expertise in Clean Architecture and entity design | Task: Create domain entities for courses and enrollments following Clean Architecture principles, defining core business types independent of infrastructure | Restrictions: Must be pure domain logic, no infrastructure dependencies, follow Clean Architecture separation, maintain type safety | Success: Domain entities are properly defined, follow Clean Architecture principles, maintain type safety, no infrastructure dependencies_\n\n- [ ] 4. Create course feature domain schemas\n  - File: apps/web/src/routes/courses/-domain/schemas.ts\n  - Implement 4-layer schema organization as abstract classes\n  - Create CourseBaseSchemas, CourseInputSchemas, CourseOutputSchemas, CourseValidationSchemas\n  - Add enrollment schemas following same pattern\n  - Purpose: Establish comprehensive validation layer using project patterns\n  - _Leverage: existing domain schema patterns, Zod validation_\n  - _Requirements: All requirements_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Validation Engineer with expertise in Zod schema design and abstract class patterns | Task: Create 4-layer schema organization for courses and enrollments using abstract classes, implementing BaseSchemas, InputSchemas, OutputSchemas, and ValidationSchemas following project patterns | Restrictions: Must use abstract class pattern, follow 4-layer organization, include all business constraints, maintain type safety | Success: All schemas compile without errors, validation covers all requirements, business rules are properly enforced, follows project abstract class patterns_\n\n- [ ] 5. Create course feature domain errors\n  - File: apps/web/src/routes/courses/-domain/errors.ts\n  - Define oRPC error definitions using oc.errors() with message and Zod data schemas\n  - Create reusable error bases for course operations\n  - Add enrollment-specific error definitions\n  - Purpose: Establish domain-level error handling following contract-first pattern\n  - _Leverage: existing oRPC error patterns_\n  - _Requirements: All requirements_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Error Handling Specialist with expertise in oRPC error definitions and contract-first development | Task: Create domain error definitions using oc.errors() pattern with message and Zod data schemas for all course and enrollment operations | Restrictions: Must use oc.errors() pattern, include message and Zod data schemas, create reusable error bases, follow contract-first approach | Success: Error definitions are comprehensive, follow oRPC contract-first pattern, include proper Zod data schemas, are reusable across operations_\n\n- [ ] 6. Create course feature domain contracts\n  - File: apps/web/src/routes/courses/-domain/contracts.ts\n  - Define oRPC API contracts abstract class using oc builder\n  - Compose errors with input/output schemas\n  - Create contracts for all course CRUD and enrollment operations\n  - Purpose: Establish type-safe API contracts following contract-first pattern\n  - _Leverage: domain schemas, domain errors_\n  - _Requirements: All requirements_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: API Contract Architect with expertise in oRPC contract-first development | Task: Create oRPC contracts abstract class using oc builder, composing errors with input/output schemas for all course and enrollment operations following contract-first pattern | Restrictions: Must use oc builder, compose errors with schemas, include all CRUD and enrollment operations, follow contract-first approach | Success: Contracts are type-safe and comprehensive, follow contract-first pattern, properly compose errors with schemas, cover all operations_\n\n- [ ] 7. Create course feature domain services\n  - File: apps/web/src/routes/courses/-domain/services.ts\n  - Implement abstract class CourseService with static methods\n  - Add business logic for course operations and validation\n  - Create EnrollmentService for enrollment business logic\n  - Purpose: Implement pure business logic following Clean Architecture\n  - _Leverage: domain entities, domain schemas_\n  - _Requirements: 2.1, 2.2, 2.3, 2.4, 2.5, 5.1, 5.2, 5.3, 5.4, 5.5_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Domain Service Developer with expertise in Clean Architecture and business logic | Task: Create abstract class services with static methods for course and enrollment business logic, following Clean Architecture principles and abstract class patterns | Restrictions: Must be pure business logic, use abstract class pattern, follow Clean Architecture separation, include comprehensive validation | Success: Services implement all business logic correctly, follow Clean Architecture, use abstract class pattern, validation is comprehensive_\n\n- [ ] 8. Create course feature infrastructure repository\n  - File: apps/web/src/routes/courses/-lib/course-repository.ts\n  - Implement abstract class CourseRepository with static methods\n  - Add database parameter as first argument for dependency injection\n  - Include CRUD operations and query methods\n  - Purpose: Implement data access layer following repository pattern\n  - _Leverage: database schema, existing repository patterns_\n  - _Requirements: 1.1, 1.2, 2.1, 2.2, 2.3_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Infrastructure Developer with expertise in repository pattern and Drizzle ORM | Task: Create CourseRepository abstract class with static methods, using database parameter as first argument for dependency injection, implementing all CRUD operations | Restrictions: Must use abstract class pattern, database parameter first argument, follow repository pattern, include proper error handling | Success: Repository implements all CRUD operations, follows abstract class pattern, uses proper dependency injection, error handling is comprehensive_\n\n- [ ] 9. Create enrollment feature infrastructure repository\n  - File: apps/web/src/routes/courses/-lib/enrollment-repository.ts\n  - Implement abstract class EnrollmentRepository with static methods\n  - Add user-specific queries and duplicate checking\n  - Include relationship management between users and courses\n  - Purpose: Implement enrollment data access following repository pattern\n  - _Leverage: course repository patterns, database schema_\n  - _Requirements: 5.1, 5.2, 5.3, 5.4, 5.5, 6.1, 6.2, 6.3, 6.4_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Infrastructure Developer with expertise in relationship management and repository pattern | Task: Create EnrollmentRepository abstract class for user-course relationships, including duplicate checking and user-specific queries following repository pattern | Restrictions: Must use abstract class pattern, database parameter first argument, handle relationships properly, prevent duplicates | Success: Repository handles enrollments correctly, prevents duplicates, supports user-specific queries, follows repository pattern_\n\n- [ ] 10. Create course feature infrastructure types\n  - File: apps/web/src/routes/courses/-lib/types.ts\n  - Export infrastructure-specific types and utilities\n  - Include repository type exports and helper types\n  - Purpose: Provide infrastructure type exports for feature\n  - _Leverage: domain entities, repository types_\n  - _Requirements: All requirements_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: TypeScript Developer specializing in infrastructure type organization | Task: Create infrastructure types exports for the course feature, including repository types and helper utilities | Restrictions: Must export infrastructure-specific types only, maintain proper type organization, follow project type patterns | Success: Infrastructure types are properly organized and exported, maintain type safety, follow project patterns_\n\n- [ ] 11. Create get-courses application handler\n  - File: apps/web/src/routes/courses/-app/get-courses.ts\n  - Implement contract via implement() for course listing\n  - Use publicProcedure for public access\n  - Coordinate with repository and service layers\n  - Purpose: Implement public course listing endpoint\n  - _Leverage: domain contracts, course repository, course service_\n  - _Requirements: 1.1, 1.2, 1.3, 1.4_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Application Layer Developer with expertise in oRPC handler implementation | Task: Create get-courses handler using implement() pattern, coordinating with repository and service layers for public course listing | Restrictions: Must use implement() pattern, use publicProcedure, coordinate with layers properly, handle errors comprehensively | Success: Handler returns course list correctly, follows implement() pattern, coordinates with layers, error handling is comprehensive_\n\n- [ ] 12. Create get-course application handler\n  - File: apps/web/src/routes/courses/-app/get-course.ts\n  - Implement contract via implement() for single course retrieval\n  - Use publicProcedure for public access\n  - Include proper error handling for not found scenarios\n  - Purpose: Implement public single course retrieval endpoint\n  - _Leverage: domain contracts, course repository_\n  - _Requirements: 1.1, 1.2, 1.3, 1.4_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Application Layer Developer with expertise in oRPC handler implementation | Task: Create get-course handler using implement() pattern for single course retrieval with proper error handling | Restrictions: Must use implement() pattern, use publicProcedure, handle not found errors properly, coordinate with repository | Success: Handler returns single course correctly, handles not found errors, follows implement() pattern_\n\n- [ ] 13. Create create-course application handler\n  - File: apps/web/src/routes/courses/-app/create-course.ts\n  - Implement contract via implement() for course creation\n  - Use publicProcedure for public access\n  - Include creator attribution for authenticated users\n  - Purpose: Implement public course creation endpoint\n  - _Leverage: domain contracts, course service, course repository_\n  - _Requirements: 2.1, 2.2, 2.3, 2.4, 2.5_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Application Layer Developer with expertise in oRPC handler implementation | Task: Create create-course handler using implement() pattern with creator attribution for authenticated users and comprehensive validation | Restrictions: Must use implement() pattern, use publicProcedure, handle creator attribution, coordinate with service layer | Success: Handler creates courses correctly, handles creator attribution, validation is comprehensive, follows implement() pattern_\n\n- [ ] 14. Create update-course application handler\n  - File: apps/web/src/routes/courses/-app/update-course.ts\n  - Implement contract via implement() for course updates\n  - Use publicProcedure for public access\n  - Include proper validation and update logic\n  - Purpose: Implement public course update endpoint\n  - _Leverage: domain contracts, course service, course repository_\n  - _Requirements: 2.1, 2.2, 2.3, 2.4, 2.5_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Application Layer Developer with expertise in oRPC handler implementation | Task: Create update-course handler using implement() pattern with proper validation and update logic | Restrictions: Must use implement() pattern, use publicProcedure, validate inputs properly, coordinate with service layer | Success: Handler updates courses correctly, validation is comprehensive, follows implement() pattern_\n\n- [ ] 15. Create delete-course application handler\n  - File: apps/web/src/routes/courses/-app/delete-course.ts\n  - Implement contract via implement() for course deletion\n  - Use publicProcedure for public access\n  - Include proper error handling and deletion logic\n  - Purpose: Implement public course deletion endpoint\n  - _Leverage: domain contracts, course repository_\n  - _Requirements: 2.1, 2.2, 2.3, 2.4, 2.5_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Application Layer Developer with expertise in oRPC handler implementation | Task: Create delete-course handler using implement() pattern with proper error handling and deletion logic | Restrictions: Must use implement() pattern, use publicProcedure, handle not found errors properly, coordinate with repository | Success: Handler deletes courses correctly, handles not found errors, follows implement() pattern_\n\n- [ ] 16. Create enroll-course application handler\n  - File: apps/web/src/routes/courses/-app/enroll-course.ts\n  - Implement contract via implement() for course enrollment\n  - Use protectedProcedure for authenticated access\n  - Include duplicate checking and user validation\n  - Purpose: Implement private course enrollment endpoint\n  - _Leverage: domain contracts, enrollment service, enrollment repository_\n  - _Requirements: 5.1, 5.2, 5.3, 5.4, 5.5_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Application Layer Developer with expertise in authentication and protected endpoints | Task: Create enroll-course handler using implement() pattern with protectedProcedure, including duplicate checking and user validation | Restrictions: Must use implement() pattern, use protectedProcedure, enforce authentication, prevent duplicates | Success: Handler enrolls users correctly, authentication is enforced, duplicates are prevented, follows implement() pattern_\n\n- [ ] 17. Create get-my-courses application handler\n  - File: apps/web/src/routes/courses/-app/get-my-courses.ts\n  - Implement contract via implement() for user's enrolled courses\n  - Use protectedProcedure for authenticated access\n  - Filter courses by authenticated user\n  - Purpose: Implement private user courses listing endpoint\n  - _Leverage: domain contracts, enrollment repository, course repository_\n  - _Requirements: 6.1, 6.2, 6.3, 6.4_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Application Layer Developer with expertise in authentication and data filtering | Task: Create get-my-courses handler using implement() pattern with protectedProcedure, filtering courses by authenticated user | Restrictions: Must use implement() pattern, use protectedProcedure, filter by user context, maintain data privacy | Success: Handler returns user's courses only, authentication is enforced, data privacy is maintained, follows implement() pattern_\n\n- [ ] 18. Update main oRPC router with course feature\n  - File: apps/web/src/lib/orpc/router/index.ts\n  - Import and add course feature contracts to main router\n  - Ensure proper organization and documentation\n  - Purpose: Integrate course feature into main API router\n  - _Leverage: existing router organization, course domain contracts_\n  - _Requirements: All requirements_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: API Integration Specialist with expertise in oRPC router organization | Task: Update main oRPC router to include course feature contracts, maintaining proper organization and following existing patterns | Restrictions: Must follow existing router organization, maintain backward compatibility, ensure all endpoints are properly exposed | Success: All course endpoints are accessible through main router, organization is clean, existing functionality remains intact_\n\n- [ ] 19. Generate and apply database migrations\n  - File: apps/web/src/lib/db/migrations/ (generated)\n  - Run database migration generation for course and enrollment schemas\n  - Apply migrations and verify table creation\n  - Purpose: Update database schema with course feature tables\n  - _Leverage: existing migration tools and patterns_\n  - _Requirements: 4.1, 4.2, 4.3, 4.4, 5.1, 5.2, 5.3, 5.4, 5.5_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Database Administrator with expertise in Drizzle migrations | Task: Generate and apply database migrations for course and enrollment schemas, verifying proper table creation and relationships | Restrictions: Must use existing migration tools, verify schema before applying, maintain data integrity | Success: Database schema is updated correctly, tables and relationships are created properly, migrations can be applied safely_\n\n- [ ] 20. Verify OpenAPI documentation generation\n  - File: Check OpenAPI output and documentation completeness\n  - Verify all course and enrollment endpoints are documented\n  - Ensure schema documentation accuracy\n  - Purpose: Confirm comprehensive OpenAPI documentation\n  - _Leverage: existing OpenAPI generation configuration_\n  - _Requirements: All requirements_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Technical Documentation Specialist with expertise in OpenAPI specifications | Task: Verify and validate OpenAPI documentation generation for all course and enrollment endpoints, ensuring comprehensive and accurate documentation | Restrictions: Must verify all endpoints, ensure schema accuracy, validate example responses | Success: OpenAPI documentation is complete and accurate, all endpoints are documented, schemas are correctly represented_\n",
  "fileStats": {
    "size": 20958,
    "lines": 194,
    "lastModified": "2025-10-21T10:02:52.955Z"
  },
  "comments": []
}
