{
  "id": "snapshot_1761040787000_a14w4903f",
  "approvalId": "approval_1761040225488_re1lv5snu",
  "approvalTitle": "Course CRUD Tasks Document",
  "version": 2,
  "timestamp": "2025-10-21T09:59:47.000Z",
  "trigger": "revision_requested",
  "status": "pending",
  "content": "# Tasks Document\n\n- [ ] 1. Create course database schema\n  - File: apps/web/src/lib/db/schema/course.ts\n  - Define course table with all required fields (id, name, price, categoryTag, thumbnail, rating, createdBy, timestamps)\n  - Add enrollment table for user-course relationships\n  - Export TypeScript types (Course, NewCourse, Enrollment, NewEnrollment)\n  - Purpose: Establish data layer foundation for course management\n  - _Leverage: apps/web/src/lib/db/schema/auth.ts, apps/web/src/lib/db/schema/utils.ts_\n  - _Requirements: 4.1, 4.2, 4.3, 4.4_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Database Developer with expertise in Drizzle ORM and PostgreSQL schema design | Task: Create course and enrollment database schemas following requirements 4.1-4.4, leveraging existing UUID generation and timestamp patterns from auth schema and utils | Restrictions: Must follow existing schema patterns, use proper data types, maintain referential integrity, include all required fields and relationships | Success: Schemas compile without errors, all required fields are properly typed, relationships are correctly defined, database migrations can be generated successfully_\n\n- [ ] 2. Update schema index exports\n  - File: apps/web/src/lib/db/schema/index.ts\n  - Add exports for course and enrollment schemas\n  - Ensure proper import organization\n  - Purpose: Make course schemas available throughout the application\n  - _Leverage: existing schema export patterns_\n  - _Requirements: 4.1, 4.2, 4.3, 4.4_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: TypeScript Developer specializing in module organization | Task: Update schema index to export course and enrollment types following existing export patterns | Restrictions: Must maintain proper import order, do not break existing exports, follow project naming conventions | Success: All course-related types are properly exported and accessible, existing functionality remains intact_\n\n- [ ] 3. Create course validation schemas\n  - File: apps/web/src/lib/schemas/course.ts\n  - Implement abstract class CourseBaseSchemas with primitive schemas\n  - Implement abstract class CourseInputSchemas with CreateCourse and UpdateCourse\n  - Implement abstract class CourseOutputSchemas with response schemas\n  - Implement abstract class CourseValidationSchemas with business rules\n  - Purpose: Establish comprehensive validation layer for course operations\n  - _Leverage: existing todo schema patterns, Zod validation patterns_\n  - _Requirements: 4.1, 4.2, 4.3, 4.4_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Validation Engineer with expertise in Zod schema design and business rule validation | Task: Create 4-layer schema organization for course validation following existing patterns, implementing BaseSchemas, InputSchemas, OutputSchemas, and ValidationSchemas abstract classes | Restrictions: Must follow 4-layer organization pattern, use proper Zod validation rules, include all business constraints, maintain type safety | Success: All schemas compile without errors, validation covers all requirements, business rules are properly enforced, TypeScript types are correctly inferred_\n\n- [ ] 4. Create course repository layer\n  - File: apps/web/src/lib/repositories/course.ts\n  - Implement abstract class CourseRepository with static methods\n  - Add findById, create, update, delete, list methods with database parameter injection\n  - Include proper error handling and query optimization\n  - Purpose: Provide data access layer with clean separation of concerns\n  - _Leverage: existing todo repository patterns, Drizzle ORM patterns_\n  - _Requirements: 1.1, 1.2, 2.1, 2.2, 2.3_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Backend Developer with expertise in Drizzle ORM and repository pattern | Task: Create CourseRepository abstract class with static methods following repository parameter convention (database first argument), implementing all CRUD operations for courses | Restrictions: Must use database parameter as first argument, follow existing repository patterns, include proper error handling, maintain transaction safety | Success: All repository methods work correctly, database operations are efficient, error handling is comprehensive, follows project repository patterns_\n\n- [ ] 5. Create enrollment repository layer\n  - File: apps/web/src/lib/repositories/enrollment.ts\n  - Implement abstract class EnrollmentRepository with static methods\n  - Add findByUserAndCourse, create, findByUser methods\n  - Include duplicate enrollment checking logic\n  - Purpose: Provide data access layer for enrollment management\n  - _Leverage: course repository patterns, user schema patterns_\n  - _Requirements: 5.1, 5.2, 6.1, 6.2, 6.3, 6.4_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Backend Developer with expertise in relationship management and database operations | Task: Create EnrollmentRepository abstract class with methods for enrollment operations, including duplicate checking and user-based queries | Restrictions: Must handle user-course relationships properly, prevent duplicate enrollments, follow repository parameter convention | Success: Enrollment operations work correctly, duplicates are prevented, user-based queries return correct results_\n\n- [ ] 6. Create course service layer\n  - File: apps/web/src/lib/services/course.ts\n  - Implement abstract class CourseService with static methods\n  - Add business logic for course operations and validation\n  - Include creator attribution logic for authenticated users\n  - Purpose: Implement business logic layer with proper validation\n  - _Leverage: course repository, validation schemas, existing service patterns_\n  - _Requirements: 2.1, 2.2, 2.3, 2.4, 2.5_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Backend Developer with expertise in business logic and service layer architecture | Task: Create CourseService abstract class implementing all course business logic, including validation, creator attribution, and proper error handling | Restrictions: Must use validation schemas, coordinate with repository layer, maintain business rule enforcement, handle authentication context properly | Success: All business logic is correctly implemented, validation is comprehensive, creator attribution works for authenticated users_\n\n- [ ] 7. Create enrollment service layer\n  - File: apps/web/src/lib/services/enrollment.ts\n  - Implement abstract class EnrollmentService with static methods\n  - Add enrollment business logic and duplicate checking\n  - Include user authorization for enrollment operations\n  - Purpose: Implement enrollment business logic with proper access control\n  - _Leverage: enrollment repository, course service, authentication patterns_\n  - _Requirements: 5.1, 5.2, 5.3, 5.4, 5.5_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Backend Developer with expertise in authentication and enrollment business logic | Task: Create EnrollmentService abstract class with enrollment operations, including duplicate checking, user authorization, and proper error handling | Restrictions: Must enforce user authentication, prevent duplicate enrollments, validate course existence, maintain data privacy | Success: Enrollment operations are secure, duplicates are prevented, only authenticated users can enroll, data privacy is maintained_\n\n- [ ] 8. Create oRPC contracts for courses\n  - File: apps/web/src/lib/orpc/contracts/course.ts\n  - Define oRPC contracts for all course CRUD operations\n  - Include input/output schemas and error definitions\n  - Add OpenAPI documentation annotations\n  - Purpose: Establish type-safe API contracts for course operations\n  - _Leverage: existing oRPC contract patterns, validation schemas_\n  - _Requirements: 1.1, 1.2, 1.3, 1.4, 2.1, 2.2, 2.3, 2.4, 2.5_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: API Architect with expertise in oRPC contract design and OpenAPI documentation | Task: Create comprehensive oRPC contracts for course CRUD operations using contract-first pattern, including proper error definitions and documentation | Restrictions: Must use contract-first pattern, include all CRUD operations, provide comprehensive error definitions, ensure OpenAPI generation compatibility | Success: All course operations have proper contracts, type safety is maintained, OpenAPI docs are generated correctly, error handling is comprehensive_\n\n- [ ] 9. Create oRPC contracts for enrollment\n  - File: apps/web/src/lib/orpc/contracts/enrollment.ts\n  - Define oRPC contracts for enrollment and my-courses operations\n  - Include authentication requirements and proper error definitions\n  - Add OpenAPI documentation annotations\n  - Purpose: Establish type-safe API contracts for enrollment operations\n  - _Leverage: course contract patterns, authentication patterns_\n  - _Requirements: 5.1, 5.2, 5.3, 5.4, 5.5, 6.1, 6.2, 6.3, 6.4_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: API Architect with expertise in authentication and protected API contracts | Task: Create oRPC contracts for enrollment and my-courses operations with proper authentication requirements and comprehensive error handling | Restrictions: Must enforce authentication requirements, include proper error definitions, maintain data privacy, ensure type safety | Success: Enrollment contracts are secure and type-safe, authentication is properly enforced, error handling covers all scenarios, OpenAPI documentation is complete_\n\n- [ ] 10. Create course API handlers\n  - File: apps/web/src/routes/courses/-app/get-courses.ts\n  - File: apps/web/src/routes/courses/-app/get-course.ts\n  - File: apps/web/src/routes/courses/-app/create-course.ts\n  - File: apps/web/src/routes/courses/-app/update-course.ts\n  - File: apps/web/src/routes/courses/-app/delete-course.ts\n  - Implement public handlers for all course CRUD operations\n  - Include proper validation and error handling\n  - Purpose: Implement API endpoints for course management\n  - _Leverage: existing todo handler patterns, course service layer_\n  - _Requirements: 1.1, 1.2, 1.3, 1.4, 2.1, 2.2, 2.3, 2.4, 2.5_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Full-stack Developer with expertise in oRPC handler implementation and API development | Task: Create public API handlers for all course CRUD operations following existing handler patterns, coordinating with service layer and implementing proper error handling | Restrictions: Must follow existing handler patterns, use service layer properly, implement comprehensive error handling, maintain public access (no authentication required) | Success: All course CRUD operations work correctly via API, error handling is comprehensive, responses are properly formatted, follows existing patterns_\n\n- [ ] 11. Create enrollment API handlers\n  - File: apps/web/src/routes/courses/-app/enroll-course.ts\n  - File: apps/web/src/routes/courses/-app/get-my-courses.ts\n  - Implement protected handlers for enrollment operations\n  - Include authentication validation and user-specific data filtering\n  - Purpose: Implement private API endpoints for enrollment management\n  - _Leverage: existing protected procedure patterns, enrollment service layer_\n  - _Requirements: 5.1, 5.2, 5.3, 5.4, 5.5, 6.1, 6.2, 6.3, 6.4_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Full-stack Developer with expertise in authentication and protected API endpoints | Task: Create protected API handlers for enrollment and my-courses operations, implementing proper authentication validation and user-specific data filtering | Restrictions: Must enforce authentication requirements, filter data by user context, prevent unauthorized access, implement comprehensive error handling | Success: Enrollment operations are secure and work correctly, users can only access their own data, authentication is properly enforced, error handling is comprehensive_\n\n- [ ] 12. Update main oRPC router\n  - File: apps/web/src/lib/orpc/router/index.ts\n  - Add course endpoints to main router\n  - Add enrollment endpoints to main router\n  - Ensure proper organization and documentation\n  - Purpose: Integrate course and enrollment endpoints into main API\n  - _Leverage: existing router organization patterns_\n  - _Requirements: All requirements_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: API Integration Specialist with expertise in oRPC router organization and API integration | Task: Update main oRPC router to include course and enrollment endpoints, maintaining proper organization and following existing patterns | Restrictions: Must follow existing router organization, maintain backward compatibility, ensure all endpoints are properly exposed, include proper documentation | Success: All course and enrollment endpoints are accessible through main router, API organization is clean and consistent, existing functionality remains intact_\n\n- [ ] 13. Generate and apply database migrations\n  - File: apps/web/src/lib/db/migrations/ (generated)\n  - Run database migration generation and apply changes\n  - Verify table creation and relationships\n  - Purpose: Update database schema with course and enrollment tables\n  - _Leverage: existing database migration tools and patterns_\n  - _Requirements: 4.1, 4.2, 4.3, 4.4, 5.1, 5.2, 5.3, 5.4, 5.5_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Database Administrator with expertise in Drizzle migrations and PostgreSQL schema management | Task: Generate and apply database migrations for course and enrollment schemas, verifying proper table creation and relationships | Restrictions: Must use existing migration tools, verify schema correctness before applying, maintain data integrity, test migration rollback capability | Success: Database schema is updated correctly, all tables and relationships are created properly, migrations can be applied and rolled back safely_\n\n- [ ] 14. Test API endpoints and functionality\n  - File: tests/api/courses.test.ts (create if needed)\n  - Create comprehensive tests for all course and enrollment endpoints\n  - Test both success and error scenarios\n  - Purpose: Ensure API reliability and proper functionality\n  - _Leverage: existing test patterns and utilities_\n  - _Requirements: All requirements_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: QA Engineer with expertise in API testing and integration testing | Task: Create comprehensive tests for all course and enrollment API endpoints, covering success scenarios, error conditions, and edge cases | Restrictions: Must test all endpoints, cover both public and protected operations, include authentication testing, maintain test isolation | Success: All API endpoints are thoroughly tested, tests cover success and failure scenarios, authentication is properly tested, test suite provides good coverage_\n\n- [ ] 15. Verify OpenAPI documentation generation\n  - File: Check OpenAPI output and documentation\n  - Verify that all endpoints are properly documented\n  - Ensure schema documentation is complete and accurate\n  - Purpose: Confirm OpenAPI documentation is comprehensive\n  - _Leverage: existing OpenAPI generation configuration_\n  - _Requirements: All requirements_\n  - _Prompt: Implement the task for spec course-crud, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Technical Documentation Specialist with expertise in OpenAPI specifications and API documentation | Task: Verify and validate OpenAPI documentation generation for all course and enrollment endpoints, ensuring comprehensive and accurate documentation | Restrictions: Must verify all endpoints are documented, ensure schema accuracy, validate example responses, check error documentation completeness | Success: OpenAPI documentation is complete and accurate, all endpoints are properly documented, schemas are correctly represented, examples are helpful and valid_\n",
  "fileStats": {
    "size": 17032,
    "lines": 152,
    "lastModified": "2025-10-21T09:50:19.229Z"
  },
  "comments": []
}
